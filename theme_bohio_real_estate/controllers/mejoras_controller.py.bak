# -*- coding: utf-8 -*-
from odoo import http
from odoo.http import request
import json
import logging

_logger = logging.getLogger(__name__)


class MejorasController(http.Controller):
    """Controller para mejoras consolidadas: contadores, búsqueda inteligente, filtros"""

    # =================== 1. API PARA CONTADOR EN HOME ===================

    @http.route(['/api/properties/count'], type='json', auth='public', website=True, csrf=False)
    def api_properties_count(self, **kwargs):
    """Contador de propiedades para mostrar en homepage"""
    try:
        Property = request.env['product.template'].sudo()
        
        total = Property.search_count([
            ('is_property', '=', True),
            ('state', '=', 'free'),
        ])
        
        rent_count = Property.search_count([
            ('is_property', '=', True),
            ('state', '=', 'free'),
            ('type_service', 'in', ['rent', 'sale_rent']),
        ])
        
        sale_count = Property.search_count([
            ('is_property', '=', True),
            ('state', '=', 'free'),
            ('type_service', 'in', ['sale', 'sale_rent']),
            ('project_worksite_id', '=', False),
        ])
        
        projects_count = Property.search_count([
            ('is_property', '=', True),
            ('state', '=', 'free'),
            ('project_worksite_id', '!=', False),
        ])
        
        return {
            'success': True,
            'total': total,
            'rent': rent_count,
            'sale': sale_count,
            'projects': projects_count,
        }
        
    except Exception as e:
        return {'success': False, 'error': str(e)}


# =================== 2. FILTROS DINÁMICOS ===================

@http.route(['/api/properties/filters'], type='json', auth='public', website=True, csrf=False)
def api_properties_filters(self, **kwargs):
    """Obtener filtros dinámicos con contadores"""
    try:
        Property = request.env['product.template'].sudo()
        current_filters = kwargs.get('filters', {})
        
        base_domain = [
            ('is_property', '=', True),
            ('state', '=', 'free'),
        ]
        
        # Aplicar filtro de servicio si existe
        if current_filters.get('type_service'):
            ts = current_filters['type_service']
            if ts == 'sale_rent':
                base_domain.append(('type_service', 'in', ['sale', 'rent', 'sale_rent']))
            else:
                base_domain.append(('type_service', 'in', [ts, 'sale_rent']))
        
        # Tipos de propiedad con contadores
        property_types_data = Property.read_group(
            base_domain,
            ['property_type'],
            ['property_type']
        )
        
        property_types = []
        type_labels = dict(Property._fields['property_type'].selection)
        
        for item in property_types_data:
            if item['property_type']:
                property_types.append({
                    'value': item['property_type'],
                    'label': type_labels.get(item['property_type'], item['property_type']),
                    'count': item['property_type_count']
                })
        
        # Ciudades con contadores
        cities_data = Property.read_group(base_domain, ['city_id'], ['city_id'])
        cities = [
            {
                'id': item['city_id'][0],
                'name': item['city_id'][1],
                'count': item['city_id_count']
            }
            for item in cities_data if item['city_id']
        ]
        
        return {
            'success': True,
            'property_types': property_types,
            'cities': cities,
        }
        
    except Exception as e:
        return {'success': False, 'error': str(e)}


# =================== 3. BÚSQUEDA INTELIGENTE ===================

@http.route(['/api/search/smart'], type='json', auth='public', website=True, csrf=False)
def api_smart_search(self, **kwargs):
    """Búsqueda inteligente que determina tipo y redirige"""
    try:
        search_term = kwargs.get('term', '').strip()
        type_service = kwargs.get('type_service', '')
        property_type = kwargs.get('property_type', '')
        
        if not search_term:
            return {'success': False, 'message': 'Término requerido'}
        
        Property = request.env['product.template'].sudo()
        
        # 1. Buscar por código
        property_by_code = Property.search([
            ('is_property', '=', True),
            ('default_code', '=ilike', search_term)
        ], limit=1)
        
        if property_by_code:
            return {
                'success': True,
                'type': 'property',
                'redirect_url': f'/property/{property_by_code.id}'
            }
        
        # 2. Buscar ciudad
        City = request.env['res.city'].sudo()
        city = City.search([('name', 'ilike', search_term)], limit=1)
        
        if city:
            count = Property.search_count([
                ('is_property', '=', True),
                ('state', '=', 'free'),
                ('city_id', '=', city.id)
            ])
            
            if count > 0:
                url = f'/properties?city_id={city.id}'
                if type_service:
                    url += f'&type_service={type_service}'
                if property_type:
                    url += f'&property_type={property_type}'
                
                return {
                    'success': True,
                    'type': 'city',
                    'name': city.name,
                    'count': count,
                    'redirect_url': url
                }
        
        # 3. Búsqueda general
        url = f'/properties?search={search_term}'
        if type_service:
            url += f'&type_service={type_service}'
        if property_type:
            url += f'&property_type={property_type}'
        
        return {
            'success': True,
            'type': 'general',
            'redirect_url': url
        }
        
    except Exception as e:
        return {'success': False, 'error': str(e)}


# =================== 4. MARCADORES MEJORADOS PARA MAPA ===================

@http.route(['/api/properties/map/markers'], type='json', auth='public', website=True, csrf=False)
def api_properties_map_markers(self, **kwargs):
    """Marcadores mejorados con colores y datos para pins personalizados"""
    try:
        filters = kwargs.get('filters', {})
        
        domain = [
            ('is_property', '=', True),
            ('state', '=', 'free'),
            ('latitude', '!=', False),
            ('longitude', '!=', False),
        ]
        
        # Aplicar filtros
        if filters.get('type_service'):
            ts = filters['type_service']
            if ts == 'sale_rent':
                domain.append(('type_service', 'in', ['sale', 'rent', 'sale_rent']))
            else:
                domain.append(('type_service', 'in', [ts, 'sale_rent']))
        
        if filters.get('property_type'):
            domain.append(('property_type', '=', filters['property_type']))
        
        if filters.get('city_id'):
            domain.append(('city_id', '=', int(filters['city_id'])))
        
        Property = request.env['product.template'].sudo()
        properties = Property.search(domain, limit=200)
        
        markers = []
        for prop in properties:
            # Color del pin según tipo de servicio
            if prop.type_service == 'rent':
                pin_color = '#28a745'  # Verde
                price = prop.net_rental_price or 0
            elif prop.type_service == 'sale':
                pin_color = '#E31E24'  # Rojo
                price = prop.net_price or 0
            else:  # sale_rent
                pin_color = '#ffc107'  # Amarillo
                price = prop.net_price or 0
            
            markers.append({
                'id': prop.id,
                'lat': float(prop.latitude),
                'lng': float(prop.longitude),
                'title': prop.name,
                'price': price,
                'price_formatted': f'${price:,.0f}',
                'type_service': prop.type_service,
                'property_type': prop.property_type,
                'bedrooms': int(prop.num_bedrooms or 0),
                'bathrooms': int(prop.num_bathrooms or 0),
                'area': float(prop.property_area or 0),
                'city': prop.city_id.name if prop.city_id else prop.city,
                'neighborhood': prop.neighborhood or '',
                'image_url': f'/web/image/product.template/{prop.id}/image_256',
                'url': f'/property/{prop.id}',
                'pin_color': pin_color,
                'icon': self._get_property_icon(prop.property_type),
            })
        
        # Calcular centro del mapa
        if markers:
            lats = [m['lat'] for m in markers]
            lngs = [m['lng'] for m in markers]
            center = {
                'lat': sum(lats) / len(lats),
                'lng': sum(lngs) / len(lngs)
            }
        else:
            center = {'lat': 8.7479, 'lng': -75.8814}  # Montería
        
        return {
            'success': True,
            'markers': markers,
            'count': len(markers),
            'center': center,
        }
        
    except Exception as e:
        return {'success': False, 'error': str(e), 'markers': []}

def _get_property_icon(self, property_type):
    """Ícono según tipo de propiedad"""
    icons = {
        'apartment': 'fa-building',
        'house': 'fa-home',
        'commercial': 'fa-store',
        'lot': 'fa-map',
        'farm': 'fa-tree',
    }
    return icons.get(property_type, 'fa-home')
