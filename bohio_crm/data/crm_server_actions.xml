<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data>
        <!-- SERVER ACTIONS CON CODIGO PYTHON -->

        <!-- Server Action: Crear Actividad al Programar Visita -->
        <record id="action_code_create_visit_activity" model="ir.actions.server">
            <field name="name">Codigo: Crear Actividad al Programar Visita</field>
            <field name="model_id" ref="crm.model_crm_lead"/>
            <field name="state">code</field>
            <field name="code"><![CDATA[
# Crear actividad de visita si no existe
if record.ideal_visit_date:
    # Buscar actividades existentes de visita
    existing_activity = env['mail.activity'].search([
        ('res_model', '=', 'crm.lead'),
        ('res_id', '=', record.id),
        ('summary', 'ilike', 'Visita programada'),
        ('date_deadline', '=', record.ideal_visit_date.date())
    ], limit=1)

    if not existing_activity:
        # Crear nueva actividad
        env['mail.activity'].create({
            'res_model_id': env['ir.model'].search([('model', '=', 'crm.lead')], limit=1).id,
            'res_id': record.id,
            'activity_type_id': env.ref('mail.mail_activity_data_meeting').id,
            'summary': f'Visita programada: {record.name}',
            'date_deadline': record.ideal_visit_date.date(),
            'user_id': record.user_id.id if record.user_id else env.user.id,
            'note': f'Visita programada para {record.ideal_visit_date.strftime("%d/%m/%Y %H:%M")}\n' +
                   (f'Notas: {record.visit_notes}' if record.visit_notes else ''),
        })

        # Notificar en el chatter
        record.message_post(
            body=f'Se ha programado una visita para el {record.ideal_visit_date.strftime("%d/%m/%Y a las %H:%M")}.',
            subject='Visita Programada',
            message_type='notification'
        )
]]></field>
        </record>

        <!-- Server Action: Notificar Conflicto de Visitas -->
        <record id="action_code_notify_visit_conflict" model="ir.actions.server">
            <field name="name">Codigo: Notificar Conflicto de Visitas</field>
            <field name="model_id" ref="crm.model_crm_lead"/>
            <field name="state">code</field>
            <field name="code"><![CDATA[
# Notificar sobre conflicto de visitas
if record.has_conflicting_visit and record.conflicting_visit_info:
    # Crear notificacion para el vendedor
    record.activity_schedule(
        'mail.mail_activity_data_warning',
        summary='Conflicto de Visitas Detectado',
        note=record.conflicting_visit_info + '\n\nPor favor coordine los horarios para evitar solapamientos.',
        user_id=record.user_id.id if record.user_id else env.user.id
    )

    # Mensaje en el chatter
    record.message_post(
        body=f'<div class="alert alert-warning">' +
             f'<strong>Conflicto de Visitas</strong><br/>' +
             f'{record.conflicting_visit_info}</div>',
        subject='Conflicto de Visitas',
        message_type='notification'
    )
]]></field>
        </record>

        <!-- Server Action: Recordatorio Documentos de Credito -->
        <record id="action_code_remind_loan_documents" model="ir.actions.server">
            <field name="name">Codigo: Recordar Documentos de Credito</field>
            <field name="model_id" ref="crm.model_crm_lead"/>
            <field name="state">code</field>
            <field name="code"><![CDATA[
# Recordar sobre documentos pendientes si han pasado 3 dias
if record.requires_financing and record.loan_approval_status == 'not_applied':
    from datetime import datetime, timedelta

    # Verificar si ya hay actividad de recordatorio
    existing_reminder = env['mail.activity'].search([
        ('res_model', '=', 'crm.lead'),
        ('res_id', '=', record.id),
        ('summary', 'ilike', 'Documentos de credito'),
        ('state', 'not in', ['done', 'cancel'])
    ], limit=1)

    if not existing_reminder:
        # Crear recordatorio para dentro de 3 dias
        env['mail.activity'].create({
            'res_model_id': env['ir.model'].search([('model', '=', 'crm.lead')], limit=1).id,
            'res_id': record.id,
            'activity_type_id': env.ref('mail.mail_activity_data_todo').id,
            'summary': 'Solicitar documentos de credito al cliente',
            'date_deadline': (datetime.now() + timedelta(days=3)).date(),
            'user_id': record.user_id.id if record.user_id else env.user.id,
            'note': f'Cliente requiere financiamiento por {record.loan_amount or 0:,.2f}\n\n' +
                   'Documentos necesarios:\n' +
                   '- Cedula de ciudadania\n' +
                   '- Certificado laboral\n' +
                   '- Extractos bancarios (ultimos 6 meses)\n' +
                   '- Declaracion de renta (ultimos 2 anos)',
        })
]]></field>
        </record>

        <!-- Server Action: Actualizar Comision de Captacion -->
        <record id="action_code_update_capture_commission" model="ir.actions.server">
            <field name="name">Codigo: Actualizar Comision de Captacion</field>
            <field name="model_id" ref="crm.model_crm_lead"/>
            <field name="state">code</field>
            <field name="code"><![CDATA[
# Recalcular comision y notificar al captador
if record.service_interested == 'consign' and record.captured_by_id:
    # Forzar recalculo
    record._compute_capture_commission()

    # Si es nuevo registro, notificar
    if record.id not in env.context.get('commission_notified', []):
        # Enviar mensaje al captador
        if record.capture_commission_amount > 0:
            record.message_post(
                body=f'Se ha registrado una comision de captacion de {record.capture_commission_amount:,.2f} ' +
                     f'para {record.captured_by_id.name}.',
                subject='Comision de Captacion Registrada',
                message_type='notification',
                partner_ids=[record.captured_by_id.partner_id.id] if record.captured_by_id.partner_id else []
            )
]]></field>
        </record>

        <!-- Server Action: Notificar Aprobacion de Credito -->
        <record id="action_code_notify_loan_approval" model="ir.actions.server">
            <field name="name">Codigo: Notificar Aprobacion de Credito</field>
            <field name="model_id" ref="crm.model_crm_lead"/>
            <field name="state">code</field>
            <field name="code"><![CDATA[
# Notificar cuando el credito sea aprobado
if record.loan_approval_status == 'approved':
    # Crear actividad de seguimiento
    env['mail.activity'].create({
        'res_model_id': env['ir.model'].search([('model', '=', 'crm.lead')], limit=1).id,
        'res_id': record.id,
        'activity_type_id': env.ref('mail.mail_activity_data_call').id,
        'summary': 'Llamar al cliente - Credito Aprobado',
        'date_deadline': env.context.get('today', fields.Date.today()),
        'user_id': record.user_id.id if record.user_id else env.user.id,
        'note': f'El credito ha sido aprobado. Contactar al cliente para continuar con el proceso de compra.\n' +
               f'Monto aprobado: {record.loan_amount or 0:,.2f}\n' +
               f'Banco: {record.loan_bank_id.name if record.loan_bank_id else "N/A"}',
    })

    # Notificar en chatter
    record.message_post(
        body=f'<div class="alert alert-success">' +
             f'<strong>Credito Aprobado</strong><br/>' +
             f'El credito ha sido aprobado. Proceder con el cierre de la venta.</div>',
        subject='Credito Aprobado',
        message_type='notification'
    )
]]></field>
        </record>

        <!-- Server Action: Sugerir Crear Reserva al Ganar -->
        <record id="action_code_create_reservation_on_won" model="ir.actions.server">
            <field name="name">Codigo: Sugerir Crear Reserva al Ganar</field>
            <field name="model_id" ref="crm.model_crm_lead"/>
            <field name="state">code</field>
            <field name="code"><![CDATA[
# Sugerir crear reserva cuando se gana la oportunidad
if record.stage_id.is_won and record.property_ids and not record.reservation_id:
    # Crear actividad para crear reserva
    env['mail.activity'].create({
        'res_model_id': env['ir.model'].search([('model', '=', 'crm.lead')], limit=1).id,
        'res_id': record.id,
        'activity_type_id': env.ref('mail.mail_activity_data_todo').id,
        'summary': 'Crear Reserva de Propiedad',
        'date_deadline': env.context.get('today', fields.Date.today()),
        'user_id': record.user_id.id if record.user_id else env.user.id,
        'note': f'Oportunidad ganada. Crear reserva formal de la propiedad:\n' +
               f'- Propiedad: {record.property_ids[0].name}\n' +
               f'- Cliente: {record.partner_id.name if record.partner_id else record.email_from}\n' +
               f'- Valor: {record.expected_revenue or 0:,.2f}\n\n' +
               'Use el boton "Crear Reserva" en la oportunidad.',
    })

    # Mensaje en chatter
    record.message_post(
        body='<div class="alert alert-info">' +
             '<strong>Siguiente Paso</strong><br/>' +
             'La oportunidad ha sido ganada. Recuerde crear la reserva formal de la propiedad.</div>',
        subject='Crear Reserva',
        message_type='notification'
    )
]]></field>
        </record>

    </data>
</odoo>
