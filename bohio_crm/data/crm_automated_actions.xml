<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!-- ============================================
         ACCIONES AUTOMÁTICAS DEL CRM
         ============================================ -->

    <!-- Acción: Crear Actividad al Programar Visita -->
    <record id="action_create_visit_activity" model="base.automation">
        <field name="name">CRM: Crear Actividad al Programar Visita</field>
        <field name="model_id" ref="crm.model_crm_lead"/>
        <field name="active">True</field>
        <field name="trigger">on_create_or_write</field>
        <field name="filter_domain">[('ideal_visit_date', '!=', False), ('type', '=', 'opportunity')]</field>
        <field name="code">
# Crear actividad de visita si no existe
if record.ideal_visit_date:
    # Buscar actividades existentes de visita
    existing_activity = env['mail.activity'].search([
        ('res_model', '=', 'crm.lead'),
        ('res_id', '=', record.id),
        ('summary', 'ilike', 'Visita programada'),
        ('date_deadline', '=', record.ideal_visit_date.date())
    ], limit=1)

    if not existing_activity:
        # Crear nueva actividad
        env['mail.activity'].create({
            'res_model_id': env['ir.model'].search([('model', '=', 'crm.lead')], limit=1).id,
            'res_id': record.id,
            'activity_type_id': env.ref('mail.mail_activity_data_meeting').id,
            'summary': f'Visita programada: {record.name}',
            'date_deadline': record.ideal_visit_date.date(),
            'user_id': record.user_id.id if record.user_id else env.user.id,
            'note': f'Visita programada para {record.ideal_visit_date.strftime("%d/%m/%Y %H:%M")}\n' +
                   (f'Notas: {record.visit_notes}' if record.visit_notes else ''),
        })

        # Notificar en el chatter
        record.message_post(
            body=f'Se ha programado una visita para el {record.ideal_visit_date.strftime("%d/%m/%Y a las %H:%M")}.',
            subject='Visita Programada',
            message_type='notification'
        )
        </field>
    </record>

    <!-- Acción: Notificar Conflicto de Visitas -->
    <record id="action_notify_visit_conflict" model="base.automation">
        <field name="name">CRM: Notificar Conflicto de Visitas</field>
        <field name="model_id" ref="crm.model_crm_lead"/>
        <field name="active">True</field>
        <field name="trigger">on_create_or_write</field>
        <field name="filter_domain">[('ideal_visit_date', '!=', False), ('has_conflicting_visit', '=', True)]</field>
        <field name="code">
# Notificar sobre conflicto de visitas
if record.has_conflicting_visit and record.conflicting_visit_info:
    # Crear notificación para el vendedor
    record.activity_schedule(
        'mail.mail_activity_data_warning',
        summary='Conflicto de Visitas Detectado',
        note=record.conflicting_visit_info + '\n\nPor favor coordine los horarios para evitar solapamientos.',
        user_id=record.user_id.id if record.user_id else env.user.id
    )

    # Mensaje en el chatter
    record.message_post(
        body=f'<div class="alert alert-warning">' +
             f'<strong>⚠️ Conflicto de Visitas</strong><br/>' +
             f'{record.conflicting_visit_info}</div>',
        subject='Conflicto de Visitas',
        message_type='notification'
    )
        </field>
    </record>

    <!-- Acción: Recordatorio Documentos de Crédito -->
    <record id="action_remind_loan_documents" model="base.automation">
        <field name="name">CRM: Recordar Documentos de Crédito Pendientes</field>
        <field name="model_id" ref="crm.model_crm_lead"/>
        <field name="active">True</field>
        <field name="trigger">on_create_or_write</field>
        <field name="filter_domain">[('requires_financing', '=', True), ('loan_approval_status', '=', 'not_applied'), ('type', '=', 'opportunity')]</field>
        <field name="code">
# Recordar sobre documentos pendientes si han pasado 3 días
if record.requires_financing and record.loan_approval_status == 'not_applied':
    from datetime import datetime, timedelta

    # Verificar si ya hay actividad de recordatorio
    existing_reminder = env['mail.activity'].search([
        ('res_model', '=', 'crm.lead'),
        ('res_id', '=', record.id),
        ('summary', 'ilike', 'Documentos de crédito'),
        ('state', 'not in', ['done', 'cancel'])
    ], limit=1)

    if not existing_reminder:
        # Crear recordatorio para dentro de 3 días
        env['mail.activity'].create({
            'res_model_id': env['ir.model'].search([('model', '=', 'crm.lead')], limit=1).id,
            'res_id': record.id,
            'activity_type_id': env.ref('mail.mail_activity_data_todo').id,
            'summary': 'Solicitar documentos de crédito al cliente',
            'date_deadline': (datetime.now() + timedelta(days=3)).date(),
            'user_id': record.user_id.id if record.user_id else env.user.id,
            'note': f'Cliente requiere financiamiento por {record.loan_amount or 0:,.2f}\n\n' +
                   'Documentos necesarios:\n' +
                   '- Cédula de ciudadanía\n' +
                   '- Certificado laboral\n' +
                   '- Extractos bancarios (últimos 6 meses)\n' +
                   '- Declaración de renta (últimos 2 años)',
        })
        </field>
    </record>

    <!-- Acción: Actualizar Comisión de Captación Automáticamente -->
    <record id="action_update_capture_commission" model="base.automation">
        <field name="name">CRM: Actualizar Comisión de Captación</field>
        <field name="model_id" ref="crm.model_crm_lead"/>
        <field name="active">True</field>
        <field name="trigger">on_create_or_write</field>
        <field name="filter_domain">[('service_interested', '=', 'consign'), ('captured_by_id', '!=', False)]</field>
        <field name="code">
# Recalcular comisión y notificar al captador
if record.service_interested == 'consign' and record.captured_by_id:
    # Forzar recálculo
    record._compute_capture_commission()

    # Si es nuevo registro, notificar
    if record.id not in env.context.get('commission_notified', []):
        # Enviar mensaje al captador
        if record.capture_commission_amount > 0:
            record.message_post(
                body=f'Se ha registrado una comisión de captación de {record.capture_commission_amount:,.2f} ' +
                     f'para {record.captured_by_id.name}.',
                subject='Comisión de Captación Registrada',
                message_type='notification',
                partner_ids=[record.captured_by_id.partner_id.id] if record.captured_by_id.partner_id else []
            )
        </field>
    </record>

    <!-- Acción: Notificar Aprobación de Crédito -->
    <record id="action_notify_loan_approval" model="base.automation">
        <field name="name">CRM: Notificar Aprobación de Crédito</field>
        <field name="model_id" ref="crm.model_crm_lead"/>
        <field name="active">True</field>
        <field name="trigger">on_write</field>
        <field name="filter_domain">[('loan_approval_status', '=', 'approved')]</field>
        <field name="code">
# Notificar cuando el crédito sea aprobado
if record.loan_approval_status == 'approved':
    # Crear actividad de seguimiento
    env['mail.activity'].create({
        'res_model_id': env['ir.model'].search([('model', '=', 'crm.lead')], limit=1).id,
        'res_id': record.id,
        'activity_type_id': env.ref('mail.mail_activity_data_call').id,
        'summary': 'Llamar al cliente - Crédito Aprobado',
        'date_deadline': env.context.get('today', fields.Date.today()),
        'user_id': record.user_id.id if record.user_id else env.user.id,
        'note': f'El crédito ha sido aprobado. Contactar al cliente para continuar con el proceso de compra.\n' +
               f'Monto aprobado: {record.loan_amount or 0:,.2f}\n' +
               f'Banco: {record.loan_bank_id.name if record.loan_bank_id else "N/A"}',
    })

    # Notificar en chatter
    record.message_post(
        body=f'<div class="alert alert-success">' +
             f'<strong>✅ Crédito Aprobado</strong><br/>' +
             f'El crédito ha sido aprobado. Proceder con el cierre de la venta.</div>',
        subject='Crédito Aprobado',
        message_type='notification'
    )
        </field>
    </record>

    <!-- Acción: Crear Reserva Automática al Ganar Oportunidad -->
    <record id="action_create_reservation_on_won" model="base.automation">
        <field name="name">CRM: Sugerir Crear Reserva al Ganar Oportunidad</field>
        <field name="model_id" ref="crm.model_crm_lead"/>
        <field name="active">True</field>
        <field name="trigger">on_write</field>
        <field name="filter_domain">[('stage_id.is_won', '=', True), ('property_ids', '!=', False), ('reservation_id', '=', False)]</field>
        <field name="code">
# Sugerir crear reserva cuando se gana la oportunidad
if record.stage_id.is_won and record.property_ids and not record.reservation_id:
    # Crear actividad para crear reserva
    env['mail.activity'].create({
        'res_model_id': env['ir.model'].search([('model', '=', 'crm.lead')], limit=1).id,
        'res_id': record.id,
        'activity_type_id': env.ref('mail.mail_activity_data_todo').id,
        'summary': 'Crear Reserva de Propiedad',
        'date_deadline': env.context.get('today', fields.Date.today()),
        'user_id': record.user_id.id if record.user_id else env.user.id,
        'note': f'Oportunidad ganada. Crear reserva formal de la propiedad:\n' +
               f'- Propiedad: {record.property_ids[0].name}\n' +
               f'- Cliente: {record.partner_id.name if record.partner_id else record.email_from}\n' +
               f'- Valor: {record.expected_revenue or 0:,.2f}\n\n' +
               'Use el botón "Crear Reserva" en la oportunidad.',
    })

    # Mensaje en chatter
    record.message_post(
        body='<div class="alert alert-info">' +
             '<strong>📋 Siguiente Paso</strong><br/>' +
             'La oportunidad ha sido ganada. Recuerde crear la reserva formal de la propiedad.</div>',
        subject='Crear Reserva',
        message_type='notification'
    )
        </field>
    </record>

</odoo>
